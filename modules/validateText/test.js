// import fs from "fs";
// import path from "path";
// import validateTranslation from "./validateTranslation.js";

// // L·∫•y arguments t·ª´ command line
// const args = process.argv.slice(2);

// if (args.length < 2) {
//     console.log("‚ùå Thi·∫øu tham s·ªë!");
//     console.log(
//         "C√°ch d√πng: node test.js <g·ªëc1> <d·ªãch1> [g·ªëc2] [d·ªãch2] [g·ªëc3] [d·ªãch3]..."
//     );
//     console.log(
//         "V√≠ d·ª•: node test.js original1.txt translated1.txt original2.txt translated2.txt"
//     );
//     process.exit(1);
// }

// if (args.length % 2 !== 0) {
//     console.log(
//         "‚ùå S·ªë l∆∞·ª£ng file ph·∫£i ch·∫µn (m·ªói c·∫∑p g·ªìm 1 file g·ªëc v√† 1 file d·ªãch)!"
//     );
//     process.exit(1);
// }

// // Chia th√†nh c√°c c·∫∑p file
// const filePairs = [];
// for (let i = 0; i < args.length; i += 2) {
//     filePairs.push({
//         original: args[i],
//         translated: args[i + 1],
//     });
// }

// console.log(`üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra ${filePairs.length} c·∫∑p file...\n`);

// let totalIssues = 0;
// let filesWithIssues = 0;

// for (let i = 0; i < filePairs.length; i++) {
//     const { original: originalPath, translated: translatedPath } = filePairs[i];

//     console.log(
//         `üìÅ [${i + 1}/${filePairs.length}] ${path.basename(
//             originalPath
//         )} ‚Üî ${path.basename(translatedPath)}`
//     );
//     console.log("=".repeat(80));

//     // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(originalPath)) {
//         console.log(`‚ùå File g·ªëc kh√¥ng t·ªìn t·∫°i: ${originalPath}\n`);
//         continue;
//     }

//     if (!fs.existsSync(translatedPath)) {
//         console.log(`‚ùå File d·ªãch kh√¥ng t·ªìn t·∫°i: ${translatedPath}\n`);
//         continue;
//     }

//     try {
//         // ƒê·ªçc n·ªôi dung file
//         const originalContent = fs.readFileSync(originalPath, "utf8");
//         const translatedContent = fs.readFileSync(translatedPath, "utf8");

//         // Validate
//         const issues = validateTranslation(originalContent, translatedContent);

//         if (issues.length === 1 && issues[0].includes("HO√ÄN H·∫¢O")) {
//             console.log("‚úÖ HO√ÄN H·∫¢O: Kh√¥ng c√≥ l·ªói n√†o!");
//         } else {
//             filesWithIssues++;
//             totalIssues += issues.length;

//             console.log(`‚ùå Ph√°t hi·ªán ${issues.length} v·∫•n ƒë·ªÅ:`);

//             issues.forEach((issue, index) => {
//                 console.log(`\n${index + 1}. ${issue}`);
//             });
//         }
//     } catch (error) {
//         console.log(`‚ùå L·ªói khi x·ª≠ l√Ω: ${error.message}`);
//     }

//     console.log("\n" + "=".repeat(80) + "\n");
// }

// // T·ªïng k·∫øt
// console.log("üìä T·ªîNG K·∫æT:");
// console.log(`‚Ä¢ T·ªïng s·ªë c·∫∑p file: ${filePairs.length}`);
// console.log(`‚Ä¢ File c√≥ v·∫•n ƒë·ªÅ: ${filesWithIssues}`);
// console.log(`‚Ä¢ File ho√†n h·∫£o: ${filePairs.length - filesWithIssues}`);
// console.log(`‚Ä¢ T·ªïng s·ªë v·∫•n ƒë·ªÅ: ${totalIssues}`);
// console.log("=".repeat(80));

import validateTranslation from "./validateTranslation.js";

// Test data
const original = `SelfId=Txt_Test_01
Text=Hello <Cap>world<Cap>!

SelfId=Txt_Test_02
Text=Welcome <IfSing_VALUE(cat,cats)>! <IfSing_VALUE(<a>,<b(<x>)>)>`;

const translated = `SelfId=Txt_Test_01
Text=Xin ch√†o <Cap>th·∫ø gi·ªõi<Cap>!

SelfId=Txt_Test_02
Text=Ch√†o m·ª´ng <IfSing_VALUE(m√®o,m√®o)>! <IfSing_VALUE(<a>,<b(<x>)>)>`;

console.log("=== RUNNING DEBUG ===");
const issues = validateTranslation(original, translated);

console.log("\n=== FINAL RESULT ===");
console.log(issues);
